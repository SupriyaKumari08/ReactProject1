{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","aboutText","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.7561b3ba.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n//import { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props){\r\n    return(\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n    <div className=\"container-fluid\">\r\n      <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n      <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n        <span className=\"navbar-toggler-icon\"></span>\r\n      </button>\r\n      <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n        <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n          <li className=\"nav-item\">\r\n            <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n          </li>\r\n          {/*<li className=\"nav-item\">\r\n            <Link className=\"nav-link\" to=\"/about\">{props.aboutText}</Link>\r\n          </li>*/}\r\n        </ul>\r\n        {/*<form className=\"d-flex\">\r\n          <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n          <button className=\"btn btn-primary\" type=\"submit\">Search</button>\r\n        </form>*/}\r\n        <div className={`form-check form-switch text-${props.mode==='light' ? 'dark':'light'}`}>\r\n  <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\"/>\r\n  <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n</div>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n    )\r\n}\r\nNavbar.propTypes = {title:PropTypes.string,\r\n                    aboutText:PropTypes.string,}\r\n\r\n{/*Navbar.defaultProps = {\r\n    title:'Set title here',\r\n    aboutText:'About text here'\r\n};*/}                     ","import React , {useState} from \"react\";\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick=()=>{\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n    let newText=text.toUpperCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n  }\r\n  const handleLoClick=()=>{\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n    let newText=text.toLowerCase();\r\n    setText(newText)\r\n    props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n  } \r\n  const handleClearClick=()=>{\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n    let newText='';\r\n    setText(newText)\r\n    props.showAlert(\"Text cleared!\",\"success\");\r\n  }\r\n  const handleOnChange=(event)=>{\r\n    console.log(\"on change\");\r\n    setText(event.target.value);\r\n  }\r\n  //p1\r\n  const handleCopy=()=>{\r\n  var text = document.getElementById(\"myBox\");\r\n  text.select();\r\n  navigator.clipboard.writeText(text.value);\r\n  props.showAlert(\"Copied to clipboard!\",\"success\");\r\n  }\r\n  //p2\r\n  const handleExtraSpaces=()=>{\r\n  let newText = text.split(/[ ]+/);\r\n  setText(newText.join(\" \"))\r\n  props.showAlert(\"Extra spaces removed!\",\"success\");\r\n  }\r\n\r\n  const [text,setText]=useState('');\r\n\r\n  return (\r\n    <>\r\n    <div className=\"container\"style={{color:props.mode==='dark' ? 'white':'#3B185F'}}>\r\n    <h1>{props.heading} </h1>\r\n      <div className=\"my-3\">\r\n        \r\n        <textarea\r\n          className=\"form-control\" value={text} onChange={handleOnChange}\r\n          style={{backgroundColor:props.mode==='dark' ? 'grey':'white',color:props.mode==='dark'?'white':'#3B185F'}}\r\n          id=\"myBox\"\r\n          rows=\"8\"\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n      <button className=\"btn btn-primary mx-1 \" onClick={handleLoClick}>Convert to Lowercase</button>\r\n      <button className=\"btn btn-primary mx-1 \" onClick={handleClearClick}>Clear Text</button>\r\n      <button className=\"btn btn-primary mx-1 \" onClick={handleCopy}>Copy Text</button>\r\n      <button className=\"btn btn-primary mx-1 \" onClick={handleExtraSpaces}>Remove Extra Spaces</button>\r\n    </div>\r\n  <div className=\"container my-3\" style={{color:props.mode==='dark' ? 'white':'#3B185F'}}>\r\n      <h2>Your text summary</h2>\r\n    <p>{text.split(\" \").length}words and {text.length} characters</p>\r\n    <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n    <h2>Preview</h2>\r\n     <p>{text.length>0?text:\"Enter something in the textbox above to preview it here\"}</p>\r\n    </div>\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n  return (\r\n    props.alert &&<div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n      <strong>{capitalize(props.alert.type)}</strong>:{props.alert.msg}\r\n      </div>\r\n  );\r\n}\r\nexport default Alert","\nimport './App.css';\n//import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n//import{\n   // BrowserRouter as Router,\n  //  Switch,\n  //  Route\n // }from \"react-router-dom\";\n\n\n\nfunction App() {\n  const [mode,setMode]=useState('light');//whether dark mode is enabled or not\n  const[alert,setAlert]=useState(null);\n\n  const showAlert=(message,type)=>{\n     setAlert({\n       msg:message,\n       type:type\n     })\n     setTimeout(()=>{\n       setAlert(null);\n     },2000)\n  }\n\n const toggleMode=()=>{\n  if(mode === 'light'){\n    setMode('dark')\n    document.body.style.backgroundColor='#3B185F';\n    showAlert(\"Dark mode has been enabled\",\"success\");\n    document.title='TextZilla-Dark Mode';\n  }\n  else{\n    setMode('light')\n    document.body.style.backgroundColor='white';\n    showAlert(\"Light mode has been enabled\",\"success\");\n    document.title='TextZilla-Light Mode';\n  }\n  }\n  \n    return (\n    <>\n    {/*<Router>*/}\n    <Navbar title=\"TextZilla\" mode={mode} toggleMode={toggleMode} aboutText =\"About\" />\n    <Alert alert={alert}/>\n    <div className=\"container my-3\">\n    {/*<Switch>*/}\n          {/*<Route exact path=\"/about\">\n            <About/>\n          </Route>*/}\n          {/*<Route exact path=\"/\">*/}\n          <TextForm showAlert={showAlert} heading=\"Enter the text to analyze below\"  mode={mode}/>\n          {/*</Route>\n        </Switch>*/}\n     \n    {/*<About/>*/}\n    </div>\n   {/* </Router>*/}\n    \n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}